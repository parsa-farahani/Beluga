/* first grid parent */
$main-grid-cols-count: 12;
:where(.main-grid) {
    --cols-count: $main-grid-cols-count;
    display: grid;
    grid-template-columns: minmax(1rem, 1fr) repeat(var(--cols-count), minmax(0, calc(1200px / var(--cols-count)))) minmax(1rem, 1fr);
}

:where(.main-grid > *) {
    grid-column: 1 / -1;
}

:where(.main-grid > .subgrid) {
    display: grid;
    grid-template-columns: subgrid;
}

@media (max-width: map-get($breakpoints, "md")) {
    :where(.main-grid > .subgrid > *) {
        grid-column: 2 / -2;
    }
}

@include md {  // after mobile/tablets: desktops
    /* equal columns */
    :where(.subgrid.even-cols > *) {
        grid-column: span var(--cols-span, 1);
    }
    :where(.subgrid.even-cols > *:first-child) {
        grid-column: var(--cols-start, 2) / span var(--cols-span, 1);
    }
    :where(.subgrid.even-cols > *:last-child) {
        grid-column: span var(--cols-span, 1) / var(--cols-end, calc(-1 * var(--cols-start, 2)));
    }
    :where(.subgrid.even-cols > *:only-child) {
        grid-column: var(--cols-start, 2) / var(--cols-end, calc(-1 * var(--cols-start, 2)));
    }

    :where(.even-cols.cols-1) {
        --cols-span: calc( var(--cols-count) * 1 );
    }

    :where(.even-cols.cols-2) {
        --cols-span: calc( var(--cols-count) * 1 / 2 );
    }
    :where(.even-cols.cols-2 > *:nth-child(2n + 1)) {
        grid-column: var(--cols-start, 2) / span var(--cols-span, 1);
    }
    :where(.even-cols.cols-2.fill-cols > *:nth-child(2n + 1):last-child) {
        grid-column: var(--cols-start, 2) / var(--cols-end, calc(-1 * var(--cols-start, 2)));
    }
    :where(.even-cols.cols-2 > *:nth-child(2n)) {
        grid-column: span var(--cols-span, 1) / var(--cols-end, calc(-1 * var(--cols-start, 2)));
    }
    :where(.even-cols.cols-2 > *:only-child) {
        grid-column: var(--cols-start, 2) / var(--cols-end, calc(-1 * var(--cols-start, 2)));
    }


    :where(.even-cols.cols-3) {
        --cols-span: calc( var(--cols-count) * 1 / 3 );
    }
    :where(.even-cols.cols-3 > *:nth-child(3n + 1)) {
        grid-column: var(--cols-start, 2) / span var(--cols-span, 1);
    }
    :where(.even-cols.cols-3.fill-cols > *:nth-child(3n + 1):last-child) {
        grid-column: var(--cols-start, 2) / var(--cols-end, calc(-1 * var(--cols-start, 2)));
    }
    :where(.even-cols.cols-3.dense-cols > *:nth-child(3n + 2):last-child) {
        grid-column: calc(var(--cols-start, 2) + (1 * var(--cols-span))) / var(--cols-end, calc(var(--cols-start, 2) + (2 * var(--cols-span))));
    }
    :where(.even-cols.cols-3 > *:nth-child(3n)) {
        grid-column: span var(--cols-span, 1) / var(--cols-end, calc(-1 * var(--cols-start, 2)));
    }
    :where(.even-cols.cols-3 > *:only-child) {
        grid-column: var(--cols-start, 2) / var(--cols-end, calc(-1 * var(--cols-start, 2)));
    }


    :where(.even-cols.cols-4) {
        --cols-span: calc( var(--cols-count) * 1 / 4 );
    }
    :where(.even-cols.cols-4 > *:nth-child(4n + 1)) {
        grid-column: var(--cols-start, 2) / span var(--cols-span, 1);
    }
    :where(.even-cols.cols-4.fill-cols > *:nth-child(4n + 1):last-child) {
        grid-column: var(--cols-start, 2) / var(--cols-end, calc(-1 * var(--cols-start, 2)));
    }
    :where(.even-cols.cols-4.dense-cols > *:nth-child(4n + 2):last-child) {
        grid-column: calc(var(--cols-start, 2) + (1 * var(--cols-span))) / var(--cols-end, calc(var(--cols-start, 2) + (2 * var(--cols-span))));
    }
    :where(.even-cols.cols-4.dense-cols > *:nth-child(4n + 3):last-child) {
        grid-column: calc(var(--cols-start, 2) + (2 * var(--cols-span))) / var(--cols-end, calc(var(--cols-start, 2) + (3 * var(--cols-span))));
    }
    :where(.even-cols.cols-4 > *:nth-child(4n)) {
        grid-column: span var(--cols-span, 1) / var(--cols-end, calc(-1 * var(--cols-start, 2)));
    }
    :where(.even-cols.cols-4 > *:only-child) {
        grid-column: var(--cols-start, 2) / var(--cols-end, calc(-1 * var(--cols-start, 2)));
    }

    :where(.even-cols.cols-6) {
        --cols-span: calc( var(--cols-count) * 1 / 6 );
    }
    :where(.even-cols.cols-6 > *:nth-child(6n + 1)) {
        grid-column: var(--cols-start, 2) / span var(--cols-span, 1);
    }
    :where(.even-cols.cols-6.fill-cols > *:nth-child(6n + 1):last-child) {
        grid-column: var(--cols-start, 2) / var(--cols-end, calc(-1 * var(--cols-start, 2)));
    }
    :where(.even-cols.cols-6.dense-cols > *:nth-child(6n + 2):last-child) {
        grid-column: calc(var(--cols-start, 2) + (1 * var(--cols-span))) / var(--cols-end, calc(var(--cols-start, 2) + (2 * var(--cols-span))));
    }
    :where(.even-cols.cols-6.dense-cols > *:nth-child(6n + 3):last-child) {
        grid-column: calc(var(--cols-start, 2) + (2 * var(--cols-span))) / var(--cols-end, calc(var(--cols-start, 2) + (3 * var(--cols-span))));
    }
    :where(.even-cols.cols-6.dense-cols > *:nth-child(6n + 4):last-child) {
        grid-column: calc(var(--cols-start, 2) + (3 * var(--cols-span))) / var(--cols-end, calc(var(--cols-start, 2) + (4 * var(--cols-span))));
    }
    :where(.even-cols.cols-6.dense-cols > *:nth-child(6n + 5):last-child) {
        grid-column: calc(var(--cols-start, 2) + (4 * var(--cols-span))) / var(--cols-end, calc(var(--cols-start, 2) + (5 * var(--cols-span))));
    }
    :where(.even-cols.cols-6 > *:nth-child(6n)) {
        grid-column: span var(--cols-span, 1) / var(--cols-end, calc(-1 * var(--cols-start, 2)));
    }
    :where(.even-cols.cols-6 > *:only-child) {
        grid-column: var(--cols-start, 2) / var(--cols-end, calc(-1 * var(--cols-start, 2)));
    }

    :where(.even-cols.cols-12) {
        --cols-span: calc( var(--cols-count) * 1 / 12 );
    }
    :where(.even-cols.cols-12 > *:nth-child(12n + 1)) {
        grid-column: var(--cols-start, 2) / span var(--cols-span, 1);
    }
    :where(.even-cols.cols-12.fill-cols > *:nth-child(12n + 1):last-child) {
        grid-column: var(--cols-start, 2) / var(--cols-end, calc(-1 * var(--cols-start, 2)));
    }
    :where(.even-cols.cols-12.dense-cols > *:nth-child(12n + 2):last-child) {
        grid-column: calc(var(--cols-start, 2) + (1 * var(--cols-span))) / var(--cols-end, calc(var(--cols-start, 2) + (2 * var(--cols-span))));
    }
    :where(.even-cols.cols-12.dense-cols > *:nth-child(12n + 3):last-child) {
        grid-column: calc(var(--cols-start, 2) + (2 * var(--cols-span))) / var(--cols-end, calc(var(--cols-start, 2) + (3 * var(--cols-span))));
    }
    :where(.even-cols.cols-12.dense-cols > *:nth-child(12n + 4):last-child) {
        grid-column: calc(var(--cols-start, 2) + (3 * var(--cols-span))) / var(--cols-end, calc(var(--cols-start, 2) + (4 * var(--cols-span))));
    }
    :where(.even-cols.cols-12.dense-cols > *:nth-child(12n + 5):last-child) {
        grid-column: calc(var(--cols-start, 2) + (4 * var(--cols-span))) / var(--cols-end, calc(var(--cols-start, 2) + (5 * var(--cols-span))));
    }
    :where(.even-cols.cols-12.dense-cols > *:nth-child(12n + 6):last-child) {
        grid-column: calc(var(--cols-start, 2) + (5 * var(--cols-span))) / var(--cols-end, calc(var(--cols-start, 2) + (6 * var(--cols-span))));
    }
    :where(.even-cols.cols-12.dense-cols > *:nth-child(12n + 7):last-child) {
        grid-column: calc(var(--cols-start, 2) + (6 * var(--cols-span))) / var(--cols-end, calc(var(--cols-start, 2) + (7 * var(--cols-span))));
    }
    :where(.even-cols.cols-12.dense-cols > *:nth-child(12n + 8):last-child) {
        grid-column: calc(var(--cols-start, 2) + (7 * var(--cols-span))) / var(--cols-end, calc(var(--cols-start, 2) + (8 * var(--cols-span))));
    }
    :where(.even-cols.cols-12.dense-cols > *:nth-child(12n + 9):last-child) {
        grid-column: calc(var(--cols-start, 2) + (8 * var(--cols-span))) / var(--cols-end, calc(var(--cols-start, 2) + (9 * var(--cols-span))));
    }
    :where(.even-cols.cols-12.dense-cols > *:nth-child(12n + 10):last-child) {
        grid-column: calc(var(--cols-start, 2) + (9 * var(--cols-span))) / var(--cols-end, calc(var(--cols-start, 2) + (10 * var(--cols-span))));
    }
    :where(.even-cols.cols-12.dense-cols > *:nth-child(12n + 11):last-child) {
        grid-column: calc(var(--cols-start, 2) + (10 * var(--cols-span))) / var(--cols-end, calc(var(--cols-start, 2) + (11 * var(--cols-span))));
    }
    :where(.even-cols.cols-12 > *:nth-child(12n)) {
        grid-column: span var(--cols-span, 1) / var(--cols-end, calc(-1 * var(--cols-start, 2)));
    }
    :where(.even-cols.cols-12 > *:only-child) {
        grid-column: var(--cols-start, 2) / var(--cols-end, calc(-1 * var(--cols-start, 2)));
    }

    /* unequal columns */
    :where(.subgrid.row) {
        /* --max-cols-per-row: ; (for adjusting the items which are wrapped to next line) */
        /* --cols-span-sm,..:; */
        /* --cols-start */
        grid-column: 2 / -2;
    }

    :where(.subgrid.row > *:first-child) {
        grid-column-start: var( --cols-start, calc( ((12 - var(--cols-span-sm, 1)) / 2) + 1 ) );
    }

    /* .subgrid.row > *:last-child {
        grid-column-end: var(--cols-end,  calc( -1 * var( --cols-start, calc( ((12 - var(--cols-span)) / 2) + 1 ) ) ) );
    } */


    @for $i from 1 to $main-grid-cols-count + 1 {
        :where(.col-sm-#{$i}) {
            grid-column-end: sapn $i;
        }
    }
}

@include md {
    :where(.subgrid.row > *:first-child) {
        grid-column-start: var( --cols-start, calc( ((12 - var(--cols-span-md, 1)) / 2) + 1 ) );
    }

    @for $i from 1 to $main-grid-cols-count + 1 {
        :where(.col-md-#{$i}) {
            grid-column-end: sapn $i;
        }
    }
}

@include xl {
    :where(.subgrid.row > *:first-child) {
        grid-column-start: var( --cols-start, calc( ((12 - var(--cols-span-lg, 1)) / 2) + 1 ) );
    }

    @for $i from 1 to $main-grid-cols-count + 1 {
        :where(.col-lg-#{$i}) {
            grid-column-end: sapn $i;
        }
    }
}